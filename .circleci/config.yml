version: 2.1

jobs:
  build:
    docker:
      - image: circleci/python:3.5-buster
      - image: circleci/mysql:8.0.19
        command: [--default-authentication-plugin=mysql_native_password]
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: updatebot
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-{{ checksum "poetry.lock" }}
      - run:
          command: poetry install
          name: dependencies
      - run:
          # Our primary container isn't MySQL so run a sleep command until it's ready.
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
          name: Waiting for MySQL to be ready
      - save_cache:
          key: deps-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
  test:
    docker:
      - image: circleci/python:3.5-buster
      - image: circleci/mysql:8.0.19
        command: [--default-authentication-plugin=mysql_native_password]
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: updatebot
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-{{ checksum "poetry.lock" }}
      - run:
          # Our primary container isn't MySQL so run a sleep command until it's ready.
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
          name: Waiting for MySQL to be ready
      - run:
          # CircleCI halts as soon as any command returns a non-zero value.
          # So anything that might needs to be in an if statement.
          #
          # This ensures that the pr_comment script is run regardless of if our
          # command fails.
          #
          # We run the test and capture the output (stdout and stderr) in a text
          # file, because the output may be too large to pass on the command line.
          #
          # If github returns an error to our initial request, we try to grab it
          # and post the error instead of the test output. Obviously this would only
          # catch it if e.g. the test results were too large and not in
          # authentication failed.
          command: |
            sudo apt-get install jq git
            cp localconfig.py.example localconfig.py
            if $(poetry run coverage run test.py > test_output.txt 2>&1); then
              cat test_output.txt
            else
              cat test_output.txt

              if [ $CIRCLE_BRANCH = "master" ]; then
                exit 1
              fi

              sed -i '1s;^;<pre>;' test_output.txt
              echo "</pre>" >> test_output.txt

              jq -Rs '{"body": .}' test_output.txt > json_output.txt

              if [ $(. .circleci/pr_comment.sh 2> curl_output.txt) = "201" ]; then
                echo "Sent the comment to Github successfully."
                cat curl_output.txt
                false
              else
                echo "Did not send the comment to Github successfully!!!"
                cat curl_output.txt

                sed -i '1s;^;<pre>curl failed.  The response from Github was:\n;' curl_output.txt
                echo "</pre>" >> curl_output.txt

                jq -Rs '{"body": .}' curl_output.txt > json_output.txt
                . .circleci/pr_comment.sh
                false
              fi
            fi
          name: test
      - run:
          command: poetry run codecov
          name: coverage
  lint:
    docker:
      - image: circleci/python:3.5-buster
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-{{ checksum "poetry.lock" }}
      - run:
          command: poetry check
          name: dependencies
      - run:
          # The if/else clause simulates a try/catch block in bash due to
          # CircleCI halting as soon as any command returns a non-zero value.
          # COMMAND_OUTPUT ends up being stdout and stderr for the command run
          # and the if statement checks poetry's return value.
          #
          # This ensures that the pr_comment script is run regardless of if our
          # command fails.
          command: |
            sudo apt-get install jq
            if COMMAND_OUTPUT=$(poetry check && poetry run flake8 --ignore=E501,E402 . 2>&1); then
              echo $COMMAND_OUTPUT
            else
              echo $COMMAND_OUTPUT
              COMMAND_OUTPUT=$(jq -nc --arg str "<pre>$COMMAND_OUTPUT</pre>" '$str')
              . .circleci/pr_comment.sh
              exit 1
            fi
          name: lint

workflows:
  version: 2
  main:
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
